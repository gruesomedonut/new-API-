import React from 'react';
import './Modal.css';

function Modal({ isOpen, onClose, children }) {
  if (!isOpen) return null;

  return (
    <div className="modal-overlay">
      <div className="modal">
        <button className="close-button" onClick={onClose}>×</button>
        <div className="modal-content">
          {children}
        </div>
      </div>
    </div>
  );
}

export default Modal;


import React from 'react';
import './Tooltip.css';

function Tooltip({ text, children }) {
  return (
    <div className="tooltip-container">
      {children}
      <span className="tooltip-text">{text}</span>
    </div>
  );
}

export default Tooltip;


import React from 'react';
import './LoadingSpinner.css';

function LoadingSpinner() {
  return <div className="loading-spinner"></div>;
}

export default LoadingSpinner;

import React, { useState } from 'react';
import axios from 'axios';
import './CreatePromptPage.css';
import Modal from '../components/Modal';
import Tooltip from '../components/Tooltip';

function CreatePromptPage() {
  const [promptData, setPromptData] = useState({
    name: '',
    system_prompt: '',
    prompt: '',
    metadata_info: '',
    tags: '',
    creator_tenant_id: '',
    created_by: '',
    modified_by: ''
  });

  const [isModalOpen, setModalOpen] = useState(false);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setPromptData({ ...promptData, [name]: value });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      await axios.post('/api/prompt', {
        ...promptData,
        metadata_info: JSON.parse(promptData.metadata_info),
        tags: promptData.tags.split(',').map(tag => tag.trim())
      });
      setModalOpen(true);
    } catch (error) {
      console.error('There was an error creating the prompt!', error);
    }
  };

  const closeModal = () => setModalOpen(false);

  return (
    <div className="create-prompt-page">
      <h1>Create a New Prompt</h1>
      <form onSubmit={handleSubmit}>
        <label>Name:</label>
        <Tooltip text="Enter the name of the prompt">
          <input type="text" name="name" value={promptData.name} onChange={handleChange} required />
        </Tooltip>

        <label>System Prompt:</label>
        <Tooltip text="Enter the system prompt">
          <input type="text" name="system_prompt" value={promptData.system_prompt} onChange={handleChange} required />
        </Tooltip>

        <label>Prompt:</label>
        <Tooltip text="Enter the prompt text">
          <input type="text" name="prompt" value={promptData.prompt} onChange={handleChange} required />
        </Tooltip>

        <label>Metadata Info (JSON):</label>
        <Tooltip text="Enter metadata in JSON format">
          <input type="text" name="metadata_info" value={promptData.metadata_info} onChange={handleChange} required />
        </Tooltip>

        <label>Tags (comma separated):</label>
        <Tooltip text="Enter tags separated by commas">
          <input type="text" name="tags" value={promptData.tags} onChange={handleChange} required />
        </Tooltip>

        <label>Creator Tenant ID:</label>
        <Tooltip text="Enter the creator tenant ID">
          <input type="text" name="creator_tenant_id" value={promptData.creator_tenant_id} onChange={handleChange} required />
        </Tooltip>

        <label>Created By:</label>
        <Tooltip text="Enter the creator's name">
          <input type="text" name="created_by" value={promptData.created_by} onChange={handleChange} required />
        </Tooltip>

        <label>Modified By:</label>
        <Tooltip text="Enter the name of the person who modified the prompt">
          <input type="text" name="modified_by" value={promptData.modified_by} onChange={handleChange} required />
        </Tooltip>

        <button type="submit">Create Prompt</button>
      </form>

      <Modal isOpen={isModalOpen} onClose={closeModal}>
        <h2>Prompt Created Successfully!</h2>
        <p>Your prompt has been created and saved.</p>
        <button onClick={closeModal}>Close</button>
      </Modal>
    </div>
  );
}

export default CreatePromptPage;


import React, { useState, useEffect } from 'react';
import axios from 'axios';
import './CategoryPage.css';

function CategoryPage() {
  const [categories, setCategories] = useState([]);
  const [newCategory, setNewCategory] = useState('');
  const [expandedCategory, setExpandedCategory] = useState(null);

  useEffect(() => {
    const fetchCategories = async () => {
      try {
        const response = await axios.get('/api/categories');
        setCategories(response.data);
      } catch (error) {
        console.error('Error fetching categories:', error);
      }
    };

    fetchCategories();
  }, []);

  const handleAddCategory = async (e) => {
    e.preventDefault();
    try {
      const response = await axios.post('/api/categories', { name: newCategory });
      setCategories([...categories, response.data]);
      setNewCategory('');
    } catch (error) {
      console.error('Error adding category:', error);
    }
  };

  const toggleExpand = (categoryId) => {
    setExpandedCategory(expandedCategory === categoryId ? null : categoryId);
  };

  return (
    <div className="category-page">
      <h1>Manage Categories</h1>
      <form onSubmit={handleAddCategory}>
        <label>Add New Category:</label>
        <input
          type="text"
          value={newCategory}
          onChange={(e) => setNewCategory(e.target.value)}
          required
        />
        <button type="submit">Add</button>
      </form>
      <ul className="category-list">
        {categories.map((category) => (
          <li key={category.id} className="category-item">
            <div onClick={() => toggleExpand(category.id)}>
              {category.name}
              <span className="expand-icon">{expandedCategory === category.id ? '−' : '+'}</span>
            </div>
            {expandedCategory === category.id && (
              <div className="category-details">
                <p>Details about {category.name}</p>
                {/* Additional details or actions can be added here */}
              </div>
            )}
          </li>
        ))}
      </ul>
    </div>
  );
}

export default CategoryPage;


import React, { useEffect, useState } from 'react';
import { useParams } from 'react-router-dom';
import axios from 'axios';
import './PromptDetailPage.css';
import LoadingSpinner from '../components/LoadingSpinner';

function PromptDetailPage() {
  const { id } = useParams();
  const [prompt, setPrompt] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchPrompt = async () => {
      try {
        const response = await axios.get(`/api/prompt/${id}`);
        setPrompt(response.data);
        setLoading(false);
      } catch (error) {
        console.error('Error fetching the prompt:', error);
        setLoading(false);
      }
    };

    fetchPrompt();
  }, [id]);

  if (loading) return <LoadingSpinner />;

  if (!prompt) return <div className="loading">Prompt not found</div>;

  return (
    <div className="prompt-detail-page">
      <h1>Prompt Details</h1>
      <div className="prompt-details">
        <p><strong>Name:</strong> {prompt.name}</p>
        <p><strong>System Prompt:</strong> {prompt.system_prompt}</p>
        <p><strong>Prompt:</strong> {prompt.prompt}</p>
        <p><strong>Metadata Info:</strong> {JSON.stringify(prompt.metadata_info)}</p>
        <p><strong>Tags:</strong> {prompt.tags.join(', ')}</p>
);
}


### CSS Files

### 7. `src/components/Modal.css`
```css
.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  align-items: center;
  justify-content: center;
}

.modal {
  background: white;
  padding: 20px;
  border-radius: 8px;
  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
  width: 80%;
  max-width: 500px;
  position: relative;
}

.close-button {
  position: absolute;
  top: 10px;
  right: 10px;
  background: none;
  border: none;
  font-size: 1.5rem;
  cursor: pointer;
}

.modal-content {
  margin-top: 20px;
}



.tooltip-container {
  position: relative;
  display: inline-block;
}

.tooltip-text {
  visibility: hidden;
  width: 140px;
  background-color: black;
  color: #fff;
  text-align: center;
  border-radius: 6px;
  padding: 5px;
  position: absolute;
  z-index: 1;
  bottom: 125%; /* Position the tooltip above the text */
  left: 50%;
  margin-left: -70px;
  opacity: 0;
  transition: opacity 0.3s;
}

.tooltip-container:hover .tooltip-text {
  visibility: visible;
  opacity: 1;
}


.loading-spinner {
  border: 16px solid #f3f3f3;
  border-top: 16px solid #3498db;
  border-radius: 50%;
  width: 120px;
  height: 120px;
  animation: spin 2s linear infinite;
  margin: auto;
  display: block;
  margin-top: 50px;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}


.category-page {
  padding: 20px;
}

form {
  background: white;
  padding: 20px;
  border-radius: 8px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  max-width: 600px;
  margin: 0 auto;
  display: flex;
  flex-direction: column;
}

label {
  margin-bottom: 10px;
  font-weight: bold;
}

input {
  padding: 10px;
  margin-bottom: 20px;
  border: 1px solid #ccc;
  border-radius: 4px;
}

button {
  padding: 10px;
  background-color: #61dafb;
  border: none;
  border-radius: 4px;
  color: white;
  font-size: 1rem;
  cursor: pointer;
}

button:hover {
  background-color: #21a1f1;
}

.category-list {
  list-style: none;
  padding: 0;
  margin: 20px 0;
}

.category-item {
  background: white;
  padding: 10px;
  border-radius: 4px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  margin-bottom: 10px;
  cursor: pointer;
}

.expand-icon {
  float: right;
}

.category-details {
  padding: 10px;
  background-color: #f9f9f9;
  border-top: 1px solid #ccc;
  margin-top: 10px;
  border-radius: 4px;
}



