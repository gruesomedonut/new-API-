from datetime import datetime

from pydantic import BaseModel


class PromptBase(BaseModel):
    brand_name: str
    category: str
    customer_persona: str
    rationale: str

class PromptCreate(PromptBase):
    category: str
    brand_name: str
    customer_persona: str
    rationale: str

class PromptUpdate(BaseModel):
    generated_prompt: str
    smaller_prompt: str

class PromptResponse(PromptBase):
    id: int
    generated_prompt: str|None
    smaller_prompt: str|None
    created_at: datetime
    updated_at: datetime

    class Config:
        orm_mode = True

class PromptCreateResponse(BaseModel):
    id: int



from datetime import datetime
from uuid import UUID
from typing import List, Optional
from pydantic import BaseModel


class PromptBase(BaseModel):
    name: str
    system_prompt: str
    prompt: str
    metadata_info: dict
    tags: List[str]
    creator_tenant_id: str
    created_by: str
    modified_by: str


class PromptCreate(PromptBase):
    version: int


class PromptUpdate(BaseModel):
    name: Optional[str] = None
    system_prompt: Optional[str] = None
    prompt: Optional[str] = None
    metadata_info: Optional[dict] = None
    tags: Optional[List[str]] = None
    modified_by: str


class PromptResponse(PromptBase):
    id: UUID
    version: int
    created_at: datetime
    modified_at: datetime

    class Config:
        orm_mode = True


class PromptCreateResponse(BaseModel):
    id: UUID